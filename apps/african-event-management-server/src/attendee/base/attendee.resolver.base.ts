/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Attendee } from "./Attendee";
import { AttendeeCountArgs } from "./AttendeeCountArgs";
import { AttendeeFindManyArgs } from "./AttendeeFindManyArgs";
import { AttendeeFindUniqueArgs } from "./AttendeeFindUniqueArgs";
import { CreateAttendeeArgs } from "./CreateAttendeeArgs";
import { UpdateAttendeeArgs } from "./UpdateAttendeeArgs";
import { DeleteAttendeeArgs } from "./DeleteAttendeeArgs";
import { Event } from "../../event/base/Event";
import { Ticket } from "../../ticket/base/Ticket";
import { User } from "../../user/base/User";
import { AttendeeService } from "../attendee.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Attendee)
export class AttendeeResolverBase {
  constructor(
    protected readonly service: AttendeeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Attendee",
    action: "read",
    possession: "any",
  })
  async _attendeesMeta(
    @graphql.Args() args: AttendeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Attendee])
  @nestAccessControl.UseRoles({
    resource: "Attendee",
    action: "read",
    possession: "any",
  })
  async attendees(
    @graphql.Args() args: AttendeeFindManyArgs
  ): Promise<Attendee[]> {
    return this.service.attendees(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Attendee, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Attendee",
    action: "read",
    possession: "own",
  })
  async attendee(
    @graphql.Args() args: AttendeeFindUniqueArgs
  ): Promise<Attendee | null> {
    const result = await this.service.attendee(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Attendee)
  @nestAccessControl.UseRoles({
    resource: "Attendee",
    action: "create",
    possession: "any",
  })
  async createAttendee(
    @graphql.Args() args: CreateAttendeeArgs
  ): Promise<Attendee> {
    return await this.service.createAttendee({
      ...args,
      data: {
        ...args.data,

        event: args.data.event
          ? {
              connect: args.data.event,
            }
          : undefined,

        ticket: args.data.ticket
          ? {
              connect: args.data.ticket,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Attendee)
  @nestAccessControl.UseRoles({
    resource: "Attendee",
    action: "update",
    possession: "any",
  })
  async updateAttendee(
    @graphql.Args() args: UpdateAttendeeArgs
  ): Promise<Attendee | null> {
    try {
      return await this.service.updateAttendee({
        ...args,
        data: {
          ...args.data,

          event: args.data.event
            ? {
                connect: args.data.event,
              }
            : undefined,

          ticket: args.data.ticket
            ? {
                connect: args.data.ticket,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Attendee)
  @nestAccessControl.UseRoles({
    resource: "Attendee",
    action: "delete",
    possession: "any",
  })
  async deleteAttendee(
    @graphql.Args() args: DeleteAttendeeArgs
  ): Promise<Attendee | null> {
    try {
      return await this.service.deleteAttendee(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Event, {
    nullable: true,
    name: "event",
  })
  @nestAccessControl.UseRoles({
    resource: "Event",
    action: "read",
    possession: "any",
  })
  async getEvent(@graphql.Parent() parent: Attendee): Promise<Event | null> {
    const result = await this.service.getEvent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Ticket, {
    nullable: true,
    name: "ticket",
  })
  @nestAccessControl.UseRoles({
    resource: "Ticket",
    action: "read",
    possession: "any",
  })
  async getTicket(@graphql.Parent() parent: Attendee): Promise<Ticket | null> {
    const result = await this.service.getTicket(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Attendee): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
